@page "/movies/{id:int}"
@inject HttpClient Http
@inject IConfiguration Configuration

<h3>Movie Details</h3>

@if (movie == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="detail_container card border border-secondary d-flex flex-row">
        <img src="https://image.tmdb.org/t/p/w500/@movie.Poster_Path" class="card-img-top" alt="@movie.Title" />
        <div class="card-body">
            <h4 class="card-title">@movie.Title</h4>
            <p >@string.Join(", ", movie.Genres.Select(g => g.Name))</p>
            <p><strong>Release Date:</strong> @movie.Release_Date.ToString("MMMM dd, yyyy")</p>
            <p><strong>Description:</strong> @movie.Overview</p>
            <p class="card-text">
                <span class="border border-1 border-secondary rounded-3 p-1"
                      style="background-color: @(movie.Vote_Average switch {
                                <= 0 => "lightgrey",
                                > 0 and < 5 => "#FF1D18",
                                >= 5 and < 6 =>  "#FF6865",
                                >= 6 and < 7 => "#FFC78F",
                                >= 7 and < 8 => "#83F28F",
                                > 8 => "#00C04B",
                                _ => "transparent"
                            });">@movie.Vote_Average/10</span>
            </p>
            <p><strong>Runtime:</strong> @($"{movie.Runtime / 60} hr {movie.Runtime % 60} min")</p>
            <button class="btn btn-primary mt-3" @onclick="AddToWatchlist">Add to Watchlist</button>

        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Movie? movie;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Movie ID: {Id}");
        await FetchMovieDetails();
    }

    private async Task FetchMovieDetails()
    {
        try
        {
            var apiKey = Configuration["TMDB:APIKey"];
            if (string.IsNullOrWhiteSpace(apiKey))
            {
                Console.WriteLine("API Key is missing or invalid.");
                return;
            }

            var apiUrl = $"https://api.themoviedb.org/3/movie/{Id}?api_key={apiKey}&language=en-US";
            Console.WriteLine($"Fetching movie details from: {apiUrl}");

            movie = await Http.GetFromJsonAsync<Movie>(apiUrl);
            if (movie == null)
            {
                Console.WriteLine("Movie details could not be fetched or deserialized.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movie details: {ex.Message}");
        }
    }

    private void AddToWatchlist()
    {
        Console.WriteLine($"Movie '{movie?.Title}' with ID {Id} added to the watchlist!");
    }

    public class Movie
    {
        public string Title { get; set; } = string.Empty;
        public string Poster_Path { get; set; } = string.Empty;
        public double vote_Average;
        public string Overview { get; set; } = string.Empty;
        public DateOnly Release_Date { get; set; }
        public List<Genre> Genres { get; set; } = new();
        public string Tagline { get; set; } = string.Empty;
        public int Runtime { get; set; }
        public long Budget { get; set; }
        public long Revenue { get; set; }
        public string Homepage { get; set; } = string.Empty;

        public double Vote_Average
        {
            get => Math.Round(vote_Average, 1);
            set => vote_Average = value;
        }

        public string FormatDate()
        {
            var date = Release_Date.ToDateTime(TimeOnly.MinValue);
            int day = date.Day;
            string suffix = day switch
            {
                1 or 21 or 31 => "st",
                2 or 22 => "nd",
                3 or 23 => "rd",
                _ => "th"
            };
            return $"{day}{suffix} {date:MMMM yyyy}";
        }
    }

    public class Genre
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
