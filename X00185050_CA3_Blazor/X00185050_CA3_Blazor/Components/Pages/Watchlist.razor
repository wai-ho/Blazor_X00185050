@page "/watchlist"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IConfiguration Configuration
@inject WatchlistService WatchlistService
@using X00185050_CA3_Blazor.Models;
@using X00185050_CA3_Blazor.Services
@rendermode InteractiveServer

<h3>My Watchlist</h3>

@if (watchlistMovies.Count == 0)
{
    <p><em>Your watchlist is empty. Start adding movies!</em></p>
}
else
{
    <div class="row">
        @foreach (var movie in watchlistMovies)
        {
            <div class="col-md-3 mb-4">
                <div class="card">
                    <a href="/movies/@movie.Id" class="card-link">
                    <img src="https://image.tmdb.org/t/p/w500/@movie.Poster_Path" class="card-img-top" alt="@movie.Title" />
                    </a>
                    <div class="card-body">
                        <a href="/movies/@movie.Id" class="card-title h5 card-link">@movie.Title</a>
                        
                        <p class="card-text">
                            <span class="border border-1 border-secondary rounded-3 p-1"
                                  style="background-color: @(movie.Vote_Average switch {
                                <= 0 => "lightgrey",
                                > 0 and < 5 => "#FF1D18",
                                >= 5 and < 6 =>  "#FF6865",
                                >= 6 and < 7 => "#FFC78F",
                                >= 7 and < 8 => "#83F28F",
                                > 8 => "#00C04B",
                                _ => "transparent"
                            });">@movie.Vote_Average/10</span>
                        </p>
                        <p class="card-text">
                            <span class="fw-bold">@movie.FormatDate()</span>
                        </p>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromWatchlist(movie.Id)">Remove</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Movie> watchlistMovies = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchWatchlistMovies();
    }

    private async Task FetchWatchlistMovies()
    {
        try
        {
            var movieIds = WatchlistService.GetWatchlist();

        // Fetch each movie by its ID
        var tasks = movieIds.Select(id => FetchMovieDetails(id)).ToList();
        await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movies: {ex.Message}");
        }
    }

    private async Task FetchMovieDetails(int movieId)
    {
        var apiKey = Configuration["TMDB:APIKey"];
        var apiUrl = $"https://api.themoviedb.org/3/movie/{movieId}?api_key={apiKey}&language=en-US";

        var movie = await Http.GetFromJsonAsync<Movie>(apiUrl);
        if (movie != null)
        {
            watchlistMovies.Add(movie);
            StateHasChanged();
        }
    }

    private void RemoveFromWatchlist(int movieId)
    {
        WatchlistService.RemoveFromWatchlist(movieId); 
        watchlistMovies = watchlistMovies.Where(m => m.Id != movieId).ToList(); 
    }

}
